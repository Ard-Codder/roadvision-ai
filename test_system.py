#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã –¥–µ—Ç–µ–∫—Ü–∏–∏ –¥–æ—Ä–æ–≥–∏ –∏ –æ–±—ä–µ–∫—Ç–æ–≤
"""

import cv2
import numpy as np
import os
from integrated_road_detection import RoadDetectionSystem

def create_test_image():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –¥–æ—Ä–æ–≥–æ–π –∏ –æ–±—ä–µ–∫—Ç–∞–º–∏"""
    # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 640x480
    img = np.zeros((480, 640, 3), dtype=np.uint8)
    
    # –†–∏—Å—É–µ–º –¥–æ—Ä–æ–≥—É (—Å–µ—Ä—ã–π —Ü–≤–µ—Ç)
    cv2.rectangle(img, (0, 200), (640, 480), (128, 128, 128), -1)
    
    # –†–∏—Å—É–µ–º —Ä–∞–∑–º–µ—Ç–∫—É (–±–µ–ª—ã–µ –ª–∏–Ω–∏–∏)
    cv2.line(img, (320, 200), (320, 480), (255, 255, 255), 5)
    cv2.line(img, (0, 340), (640, 340), (255, 255, 255), 3)
    
    # –†–∏—Å—É–µ–º –±–æ—Ä–¥—é—Ä (–∑–µ–ª–µ–Ω—ã–π)
    cv2.rectangle(img, (0, 180), (640, 200), (0, 255, 0), -1)
    
    # –†–∏—Å—É–µ–º –º–∞—à–∏–Ω—É (—Å–∏–Ω–∏–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫)
    cv2.rectangle(img, (100, 300), (200, 380), (255, 0, 0), -1)
    
    # –†–∏—Å—É–µ–º —á–µ–ª–æ–≤–µ–∫–∞ (–∑–µ–ª–µ–Ω—ã–π –∫—Ä—É–≥)
    cv2.circle(img, (500, 350), 20, (0, 255, 0), -1)
    
    # –†–∏—Å—É–µ–º –∑–Ω–∞–∫ (–∫—Ä–∞—Å–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫)
    pts = np.array([[400, 100], [450, 150], [350, 150]], np.int32)
    cv2.fillPoly(img, [pts], (0, 0, 255))
    
    return img

def test_system():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –¥–µ—Ç–µ–∫—Ü–∏–∏ –¥–æ—Ä–æ–≥–∏ –∏ –æ–±—ä–µ–∫—Ç–æ–≤")
    print("=" * 60)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
        print("1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã...")
        system = RoadDetectionSystem()
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        print("\n2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        test_img = create_test_image()
        cv2.imwrite('test_image.jpg', test_img)
        print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: test_image.jpg")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        print("\n3. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
        system.process_image('test_image.jpg', 'test_result.jpg')
        print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: test_result.jpg")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
        print("\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
        files_to_check = [
            'test_image.jpg',
            'test_result.jpg',
            'model/road-segmentation-adas-0001.xml',
            'model/road-segmentation-adas-0001.bin'
        ]
        
        for file_path in files_to_check:
            if os.path.exists(file_path):
                size = os.path.getsize(file_path)
                print(f"‚úÖ {file_path} ({size} bytes)")
            else:
                print(f"‚ùå {file_path} - –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!")
        print("\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        print("- –°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        print("- –ú–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        print("- –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
        print("- –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöó –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –¥–µ—Ç–µ–∫—Ü–∏–∏ –¥–æ—Ä–æ–≥–∏ –∏ –æ–±—ä–µ–∫—Ç–æ–≤")
    print("=" * 60)
    
    # –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã
    system_ok = test_system()
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("=" * 60)
    
    if system_ok:
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ.")
        print("\n–î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print("python run_road_detection.py")
        print("python process_videos.py")
    else:
        print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–∏—Å—Ç–µ–º–æ–π")
        print("\n‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.")

if __name__ == "__main__":
    main() 