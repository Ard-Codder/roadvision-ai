#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –±–∞–∑–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Road Detection System
"""

import cv2
import numpy as np
from integrated_road_detection import RoadDetectionSystem

def main():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    print("üöó –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Road Detection System")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã
    print("1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã...")
    system = RoadDetectionSystem()
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    print("\n2. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
    test_image = create_test_image()
    cv2.imwrite("test_input.jpg", test_image)
    print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: test_input.jpg")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    print("\n3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
    processed_image = system.process_frame(test_image)
    cv2.imwrite("test_output.jpg", processed_image)
    print("‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: test_output.jpg")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    print("\n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤...")
    import os
    video_files = [f for f in os.listdir("videos/input") if f.endswith(('.mp4', '.avi', '.mov'))]
    
    if video_files:
        print(f"–ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤: {len(video_files)}")
        print("–î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print("python process_videos.py --list")
        print("python process_videos.py --process-all")
    else:
        print("–í–∏–¥–µ–æ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ videos/input/")
        print("–ü–æ–º–µ—Å—Ç–∏—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É videos/input/ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    
    print("\nüéâ –ü—Ä–∏–º–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω!")
    print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
    print("- test_input.jpg - –∏—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    print("- test_output.jpg - –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")

def create_test_image():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –¥–æ—Ä–æ–≥–æ–π –∏ –æ–±—ä–µ–∫—Ç–∞–º–∏"""
    # –°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ 640x480
    image = np.zeros((480, 640, 3), dtype=np.uint8)
    
    # –†–∏—Å—É–µ–º –¥–æ—Ä–æ–≥—É (—Å–µ—Ä—ã–π —Ü–≤–µ—Ç)
    cv2.rectangle(image, (0, 200), (640, 480), (128, 128, 128), -1)
    
    # –†–∏—Å—É–µ–º –º–∞—à–∏–Ω—É (–∫—Ä–∞—Å–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫)
    cv2.rectangle(image, (100, 300), (200, 400), (0, 0, 255), -1)
    cv2.putText(image, "car", (100, 290), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)
    
    # –†–∏—Å—É–µ–º —á–µ–ª–æ–≤–µ–∫–∞ (–∑–µ–ª–µ–Ω—ã–π –∫—Ä—É–≥)
    cv2.circle(image, (400, 350), 30, (0, 255, 0), -1)
    cv2.putText(image, "person", (350, 320), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
    
    # –†–∏—Å—É–µ–º –∑–Ω–∞–∫ (–∫—Ä–∞—Å–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫)
    pts = np.array([[500, 200], [480, 250], [520, 250]], np.int32)
    cv2.fillPoly(image, [pts], (0, 0, 255))
    cv2.putText(image, "stop sign", (470, 270), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 0, 255), 2)
    
    # –†–∏—Å—É–µ–º –¥–µ—Ä–µ–≤–æ (–∑–µ–ª–µ–Ω—ã–π –∫—Ä—É–≥)
    cv2.circle(image, (150, 150), 25, (0, 128, 0), -1)
    cv2.putText(image, "tree", (130, 180), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 128, 0), 2)
    
    return image

if __name__ == "__main__":
    main() 