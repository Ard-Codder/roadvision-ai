#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ —Å —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–µ–π –¥–æ—Ä–æ–≥–∏ –∏ –¥–µ—Ç–µ–∫—Ü–∏–µ–π –æ–±—ä–µ–∫—Ç–æ–≤
"""

import os
import cv2
import time
import argparse
from pathlib import Path
from integrated_road_detection import RoadDetectionSystem

class VideoProcessor:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –≤–∏–¥–µ–æ"""
        print("üöó –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ...")
        self.system = RoadDetectionSystem()
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ!")
    
    def get_video_files(self, input_dir="videos/input"):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤"""
        input_path = Path(input_dir)
        if not input_path.exists():
            print(f"‚ùå –ü–∞–ø–∫–∞ {input_dir} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
            return []
        
        video_extensions = ['.mp4', '.avi', '.mov', '.mkv', '.wmv', '.flv', '.webm']
        video_files = []
        
        for file in input_path.iterdir():
            if file.suffix.lower() in video_extensions:
                video_files.append(file)
        
        return video_files
    
    def process_single_video(self, video_path, output_dir="videos/output", show_preview=False):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ"""
        print(f"\nüé¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ: {video_path.name}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        output_path = Path(output_dir)
        output_path.mkdir(exist_ok=True)
        
        # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        output_file = output_path / f"processed_{video_path.name}"
        
        # –û—Ç–∫—Ä—ã—Ç–∏–µ –≤–∏–¥–µ–æ
        cap = cv2.VideoCapture(str(video_path))
        if not cap.isOpened():
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ: {video_path}")
            return False
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –≤–∏–¥–µ–æ
        fps = int(cap.get(cv2.CAP_PROP_FPS))
        width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
        height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
        total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))
        
        print(f"üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∏–¥–µ–æ:")
        print(f"   - –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {width}x{height}")
        print(f"   - FPS: {fps}")
        print(f"   - –í—Å–µ–≥–æ –∫–∞–¥—Ä–æ–≤: {total_frames}")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–ø–∏—Å–∏
        fourcc = cv2.VideoWriter_fourcc(*'mp4v')
        out = cv2.VideoWriter(str(output_file), fourcc, fps, (width, height))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–¥—Ä–æ–≤
        frame_count = 0
        start_time = time.time()
        
        print("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–¥—Ä–æ–≤...")
        
        while True:
            ret, frame = cap.read()
            if not ret:
                break
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–¥—Ä–∞
            processed_frame = self.system.process_frame(frame)
            
            # –ó–∞–ø–∏—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            out.write(processed_frame)
            
            # –ü–æ–∫–∞–∑ –ø—Ä–µ–≤—å—é
            if show_preview:
                cv2.imshow('Video Processing', processed_frame)
                if cv2.waitKey(1) & 0xFF == ord('q'):
                    break
            
            frame_count += 1
            
            # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 30 –∫–∞–¥—Ä–æ–≤
            if frame_count % 30 == 0:
                elapsed = time.time() - start_time
                current_fps = frame_count / elapsed
                progress = (frame_count / total_frames) * 100
                print(f"   –ü—Ä–æ–≥—Ä–µ—Å—Å: {progress:.1f}% | –ö–∞–¥—Ä–æ–≤: {frame_count}/{total_frames} | FPS: {current_fps:.1f}")
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        cap.release()
        out.release()
        if show_preview:
            cv2.destroyAllWindows()
        
        total_time = time.time() - start_time
        avg_fps = frame_count / total_time
        
        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"   - –í—Ä–µ–º—è: {total_time:.1f} —Å–µ–∫")
        print(f"   - –°—Ä–µ–¥–Ω–∏–π FPS: {avg_fps:.1f}")
        print(f"   - –†–µ–∑—É–ª—å—Ç–∞—Ç: {output_file}")
        
        return True
    
    def process_all_videos(self, input_dir="videos/input", output_dir="videos/output", show_preview=False):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –≤–∏–¥–µ–æ –≤ –ø–∞–ø–∫–µ"""
        video_files = self.get_video_files(input_dir)
        
        if not video_files:
            print(f"‚ùå –í–∏–¥–µ–æ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ {input_dir}")
            print("üìÅ –ü–æ–º–µ—Å—Ç–∏—Ç–µ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫—É videos/input/")
            return
        
        print(f"üìπ –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤: {len(video_files)}")
        for i, video_file in enumerate(video_files, 1):
            print(f"   {i}. {video_file.name}")
        
        print(f"\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {len(video_files)} –≤–∏–¥–µ–æ...")
        
        successful = 0
        failed = 0
        
        for video_file in video_files:
            try:
                if self.process_single_video(video_file, output_dir, show_preview):
                    successful += 1
                else:
                    failed += 1
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {video_file.name}: {e}")
                failed += 1
        
        print(f"\nüìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
        print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {successful}")
        print(f"   ‚ùå –û—à–∏–±–æ–∫: {failed}")
        print(f"   üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_dir}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ —Å —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–µ–π –¥–æ—Ä–æ–≥–∏")
    parser.add_argument("--list", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤")
    parser.add_argument("--process-all", action="store_true", help="–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ –≤–∏–¥–µ–æ")
    parser.add_argument("--process", type=str, help="–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤–∏–¥–µ–æ")
    parser.add_argument("--input-dir", default="videos/input", help="–ü–∞–ø–∫–∞ —Å –≤—Ö–æ–¥–Ω—ã–º–∏ –≤–∏–¥–µ–æ")
    parser.add_argument("--output-dir", default="videos/output", help="–ü–∞–ø–∫–∞ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    parser.add_argument("--show-preview", action="store_true", help="–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    
    args = parser.parse_args()
    
    processor = VideoProcessor()
    
    if args.list:
        # –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ
        video_files = processor.get_video_files(args.input_dir)
        if video_files:
            print(f"üìπ –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤ –≤ {args.input_dir}:")
            for i, video_file in enumerate(video_files, 1):
                print(f"   {i}. {video_file.name}")
        else:
            print(f"‚ùå –í–∏–¥–µ–æ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ {args.input_dir}")
    
    elif args.process_all:
        # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ –≤–∏–¥–µ–æ
        processor.process_all_videos(args.input_dir, args.output_dir, args.show_preview)
    
    elif args.process:
        # –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤–∏–¥–µ–æ
        video_path = Path(args.input_dir) / args.process
        if video_path.exists():
            processor.process_single_video(video_path, args.output_dir, args.show_preview)
        else:
            print(f"‚ùå –í–∏–¥–µ–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {video_path}")
    
    else:
        # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        print("üöó –°–∏—Å—Ç–µ–º–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ")
        print("=" * 50)
        
        while True:
            print("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
            print("1. –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ")
            print("2. –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ –≤–∏–¥–µ–æ")
            print("3. –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤–∏–¥–µ–æ")
            print("4. –í—ã—Ö–æ–¥")
            
            choice = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-4): ").strip()
            
            if choice == "1":
                video_files = processor.get_video_files()
                if video_files:
                    print(f"\nüìπ –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤: {len(video_files)}")
                    for i, video_file in enumerate(video_files, 1):
                        print(f"   {i}. {video_file.name}")
                else:
                    print("‚ùå –í–∏–¥–µ–æ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ videos/input/")
            
            elif choice == "2":
                show_preview = input("–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏? (y/n): ").lower() == 'y'
                processor.process_all_videos(show_preview=show_preview)
            
            elif choice == "3":
                video_files = processor.get_video_files()
                if video_files:
                    print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∏–¥–µ–æ:")
                    for i, video_file in enumerate(video_files, 1):
                        print(f"   {i}. {video_file.name}")
                    
                    try:
                        video_choice = int(input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–∏–¥–µ–æ: ")) - 1
                        if 0 <= video_choice < len(video_files):
                            show_preview = input("–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–≤—å—é? (y/n): ").lower() == 'y'
                            processor.process_single_video(video_files[video_choice], show_preview=show_preview)
                        else:
                            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä!")
                    except ValueError:
                        print("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
                else:
                    print("‚ùå –í–∏–¥–µ–æ —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
            
            elif choice == "4":
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")

if __name__ == "__main__":
    main() 