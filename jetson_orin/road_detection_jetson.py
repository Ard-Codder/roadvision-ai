#!/usr/bin/env python3
"""
Road Detection System –¥–ª—è NVIDIA Jetson Orin
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∞–º–µ—Ä—ã –∏ GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ–º
"""

import cv2
import numpy as np
import torch
from ultralytics import YOLO
import openvino as ov
from pathlib import Path
import time
import os
import requests
import threading
import queue
from typing import Optional, Tuple

class JetsonRoadDetectionSystem:
    def __init__(self, camera_index: int = 0, gpu_acceleration: bool = True):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –¥–ª—è Jetson Orin
        
        Args:
            camera_index: –ò–Ω–¥–µ–∫—Å –∫–∞–º–µ—Ä—ã (0 –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–π)
            gpu_acceleration: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ
        """
        self.camera_index = camera_index
        self.gpu_acceleration = gpu_acceleration
        self.running = False
        self.frame_queue = queue.Queue(maxsize=10)
        self.result_queue = queue.Queue(maxsize=10)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
        self.setup_models()
        self.setup_colors()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–º–µ—Ä—ã
        self.setup_camera()
        
        print("üöó –°–∏—Å—Ç–µ–º–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –¥–æ—Ä–æ–≥–∏ –¥–ª—è Jetson Orin –≥–æ—Ç–æ–≤–∞!")
    
    def setup_models(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –¥–ª—è Jetson"""
        print("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π –¥–ª—è Jetson Orin...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ GPU
        if self.gpu_acceleration and torch.cuda.is_available():
            device = "cuda"
            print(f"‚úÖ GPU –¥–æ—Å—Ç—É–ø–µ–Ω: {torch.cuda.get_device_name()}")
        else:
            device = "cpu"
            print("‚ö†Ô∏è GPU –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º CPU")
        
        # YOLOv8 –¥–ª—è –¥–µ—Ç–µ–∫—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–æ–≤ (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å)
        self.yolo_model = YOLO('yolov8n-seg.pt')
        self.yolo_model.to(device)
        
        # OpenVINO –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–æ—Ä–æ–≥–∏
        self.setup_openvino_road_model()
        
        print("‚úÖ –ú–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    
    def download_file(self, url: str, filename: str, directory: str) -> Optional[str]:
        """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π"""
        os.makedirs(directory, exist_ok=True)
        filepath = os.path.join(directory, filename)
        
        if os.path.exists(filepath):
            print(f"–§–∞–π–ª {filename} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return filepath
        
        print(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ {filename}...")
        try:
            response = requests.get(url, stream=True)
            response.raise_for_status()
            
            with open(filepath, 'wb') as f:
                for chunk in response.iter_content(chunk_size=8192):
                    f.write(chunk)
            
            print(f"‚úÖ {filename} —Å–∫–∞—á–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            return filepath
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è {filename}: {e}")
            return None
    
    def setup_openvino_road_model(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–¥–µ–ª–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–æ—Ä–æ–≥–∏ OpenVINO"""
        base_model_dir = Path("./model").expanduser()
        base_model_dir.mkdir(exist_ok=True)
        
        model_name = "road-segmentation-adas-0001"
        model_xml_name = f'{model_name}.xml'
        model_bin_name = f'{model_name}.bin'
        
        model_xml_path = base_model_dir / model_xml_name
        
        if not model_xml_path.exists():
            print("–°–∫–∞—á–∏–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–æ—Ä–æ–≥–∏...")
            model_xml_url = "https://storage.openvinotoolkit.org/repositories/open_model_zoo/2023.0/models_bin/1/road-segmentation-adas-0001/FP32/road-segmentation-adas-0001.xml"
            model_bin_url = "https://storage.openvinotoolkit.org/repositories/open_model_zoo/2023.0/models_bin/1/road-segmentation-adas-0001/FP32/road-segmentation-adas-0001.bin"
            
            self.download_file(model_xml_url, model_xml_name, base_model_dir)
            self.download_file(model_bin_url, model_bin_name, base_model_dir)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ OpenVINO —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –¥–ª—è Jetson
        core = ov.Core()
        self.road_model = core.read_model(model=model_xml_path)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º GPU –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if self.gpu_acceleration:
            try:
                self.compiled_road_model = core.compile_model(model=self.road_model, device_name="GPU")
                print("‚úÖ OpenVINO –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞ GPU")
            except:
                self.compiled_road_model = core.compile_model(model=self.road_model, device_name="CPU")
                print("‚ö†Ô∏è OpenVINO –º–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞ CPU")
        else:
            self.compiled_road_model = core.compile_model(model=self.road_model, device_name="CPU")
        
        self.road_input_layer = self.compiled_road_model.input(0)
        self.road_output_layer = self.compiled_road_model.output(0)
    
    def setup_colors(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏"""
        # –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ —É–ª–∏—Ü—ã
        self.object_colors = {
            # –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
            'car': (255, 0, 0),         # üîµ –°–∏–Ω–∏–π
            'truck': (255, 0, 0),       # üîµ –°–∏–Ω–∏–π
            'bus': (255, 0, 0),         # üîµ –°–∏–Ω–∏–π
            'motorcycle': (255, 0, 0),  # üîµ –°–∏–Ω–∏–π
            'bicycle': (255, 0, 0),     # üîµ –°–∏–Ω–∏–π
            'train': (255, 0, 0),       # üîµ –°–∏–Ω–∏–π
            'airplane': (255, 0, 0),    # üîµ –°–∏–Ω–∏–π
            'boat': (255, 0, 0),        # üîµ –°–∏–Ω–∏–π
            
            # –õ—é–¥–∏
            'person': (0, 255, 0),      # üü¢ –ó–µ–ª–µ–Ω—ã–π
            
            # –î–æ—Ä–æ–∂–Ω–∞—è –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞
            'stop sign': (0, 0, 255),   # üî¥ –ö—Ä–∞—Å–Ω—ã–π
            'traffic light': (0, 255, 255), # üü° –ñ–µ–ª—Ç—ã–π
            'fire hydrant': (255, 255, 0),  # üîµ –ì–æ–ª—É–±–æ–π
            'parking meter': (0, 255, 255), # üü° –ñ–µ–ª—Ç—ã–π
            'bench': (128, 0, 128),     # üü£ –§–∏–æ–ª–µ—Ç–æ–≤—ã–π
            
            # –î–æ—Ä–æ–∂–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
            'pole': (255, 165, 0),      # üü† –û—Ä–∞–Ω–∂–µ–≤—ã–π
            'street light': (255, 255, 0), # üü° –ñ–µ–ª—Ç—ã–π
            'construction': (139, 69, 19), # üü§ –ö–æ—Ä–∏—á–Ω–µ–≤—ã–π
            'fence': (128, 128, 128),   # ‚ö™ –°–µ—Ä—ã–π
            
            # –ü—Ä–∏—Ä–æ–¥–∞
            'tree': (34, 139, 34),      # üå≥ –¢–µ–º–Ω–æ-–∑–µ–ª–µ–Ω—ã–π
            'plant': (0, 128, 0),       # üåø –ó–µ–ª–µ–Ω—ã–π
            'grass': (0, 255, 127),     # üå± –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π
            
            # –ó–¥–∞–Ω–∏—è –∏ —Å–æ–æ—Ä—É–∂–µ–Ω–∏—è
            'building': (105, 105, 105), # üè¢ –¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π
            'house': (139, 69, 19),     # üè† –ö–æ—Ä–∏—á–Ω–µ–≤—ã–π
            'bridge': (160, 82, 45),    # üåâ –ö–æ—Ä–∏—á–Ω–µ–≤—ã–π
            'tunnel': (47, 79, 79),     # üöá –¢–µ–º–Ω–æ-—Å–µ—Ä—ã–π
            
            # –ñ–∏–≤–æ—Ç–Ω—ã–µ
            'dog': (255, 20, 147),      # üêï –†–æ–∑–æ–≤—ã–π
            'cat': (255, 20, 147),      # üê± –†–æ–∑–æ–≤—ã–π
            'horse': (255, 20, 147),    # üêé –†–æ–∑–æ–≤—ã–π
            'sheep': (255, 20, 147),    # üêë –†–æ–∑–æ–≤—ã–π
            'cow': (255, 20, 147),      # üêÑ –†–æ–∑–æ–≤—ã–π
            'elephant': (255, 20, 147), # üêò –†–æ–∑–æ–≤—ã–π
            'bear': (255, 20, 147),     # üêª –†–æ–∑–æ–≤—ã–π
            'zebra': (255, 20, 147),    # ü¶ì –†–æ–∑–æ–≤—ã–π
            'giraffe': (255, 20, 147),  # ü¶í –†–æ–∑–æ–≤—ã–π
        }
        
        # –¶–≤–µ—Ç–∞ –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –¥–æ—Ä–æ–≥–∏
        self.road_colors = {
            0: [68, 1, 84],    # –§–æ–Ω - —Ç–µ–º–Ω–æ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
            1: [48, 103, 141], # –î–æ—Ä–æ–≥–∞ - —Å–∏–Ω–∏–π
            2: [53, 183, 120], # –ë–æ—Ä–¥—é—Ä - –∑–µ–ª–µ–Ω—ã–π
            3: [199, 216, 52]  # –†–∞–∑–º–µ—Ç–∫–∞ - –∂–µ–ª—Ç—ã–π
        }
    
    def setup_camera(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–º–µ—Ä—ã –¥–ª—è Jetson"""
        self.cap = cv2.VideoCapture(self.camera_index)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–∞–º–µ—Ä—ã –¥–ª—è –ª—É—á—à–µ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        self.cap.set(cv2.CAP_PROP_FRAME_WIDTH, 1280)
        self.cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 720)
        self.cap.set(cv2.CAP_PROP_FPS, 30)
        self.cap.set(cv2.CAP_PROP_BUFFERSIZE, 1)
        
        if not self.cap.isOpened():
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞–º–µ—Ä—ã {self.camera_index}")
            raise RuntimeError("–ö–∞–º–µ—Ä–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        
        print(f"‚úÖ –ö–∞–º–µ—Ä–∞ {self.camera_index} –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    def segment_road(self, image: np.ndarray) -> np.ndarray:
        """–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Ä–æ–≥–∏ —Å –ø–æ–º–æ—â—å—é OpenVINO –º–æ–¥–µ–ª–∏"""
        N, C, H, W = self.road_input_layer.shape
        resized_image = cv2.resize(image, (W, H))
        input_image = np.expand_dims(resized_image.transpose(2, 0, 1), 0)
        
        # –ò–Ω—Ñ–µ—Ä–µ–Ω—Å
        result = self.compiled_road_model([input_image])[self.road_output_layer]
        segmentation_mask = np.argmax(result, axis=1)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –º–∞—Å–∫–∏ –≤ —Ü–≤–µ—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        mask = self.segmentation_map_to_image(segmentation_mask, self.road_colors)
        resized_mask = cv2.resize(mask, (image.shape[1], image.shape[0]))
        
        return resized_mask
    
    def segmentation_map_to_image(self, segmentation_mask: np.ndarray, colormap: dict) -> np.ndarray:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –º–∞—Å–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –≤ —Ü–≤–µ—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        mask = np.zeros((segmentation_mask.shape[1], segmentation_mask.shape[2], 3), dtype=np.uint8)
        
        for class_id, color in colormap.items():
            mask[segmentation_mask[0] == class_id] = color
        
        return mask
    
    def detect_objects(self, image: np.ndarray):
        """–î–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤ —Å –ø–æ–º–æ—â—å—é YOLOv8"""
        results = self.yolo_model(image, verbose=False)
        return results[0]
    
    def process_frame(self, frame: np.ndarray) -> np.ndarray:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ –∫–∞–¥—Ä–∞"""
        # –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –¥–æ—Ä–æ–≥–∏
        road_mask = self.segment_road(frame)
        
        # –î–µ—Ç–µ–∫—Ü–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
        results = self.detect_objects(frame)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        result_frame = frame.copy()
        
        # –ù–∞–ª–æ–∂–µ–Ω–∏–µ –º–∞—Å–∫–∏ –¥–æ—Ä–æ–≥–∏ —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é
        alpha = 0.3
        result_frame = cv2.addWeighted(road_mask, alpha, result_frame, 1 - alpha, 0)
        
        # –°—á–µ—Ç—á–∏–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤
        object_counts = {}
        
        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤ —Å —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–µ–π
        if hasattr(results, 'masks') and results.masks is not None:
            for i, box in enumerate(results.boxes):
                x1, y1, x2, y2 = box.xyxy[0].cpu().numpy()
                conf = box.conf[0].cpu().numpy()
                cls = int(box.cls[0].cpu().numpy())
                class_name = results.names[cls]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä–µ–∫—Ç –≤—Ö–æ–¥–∏—Ç –≤ –Ω–∞—à—É —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É
                if class_name in self.object_colors and conf > 0.5:
                    # –ü–æ–¥—Å—á–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤
                    if class_name not in object_counts:
                        object_counts[class_name] = 0
                    object_counts[class_name] += 1
                    
                    color = self.object_colors[class_name]
                    
                    # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ bbox
                    cv2.rectangle(result_frame, (int(x1), int(y1)), (int(x2), int(y2)), color, 2)
                    cv2.putText(result_frame, f'{class_name} {conf:.2f}', 
                               (int(x1), int(y1) - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)
                    
                    # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –º–∞—Å–∫–∏ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏ –æ–±—ä–µ–∫—Ç–∞
                    if i < len(results.masks) and results.masks[i] is not None:
                        try:
                            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞—Å–∫–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º
                            mask_data = results.masks[i].data.cpu().numpy()
                            if mask_data is not None and mask_data.size > 0:
                                # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –º–∞—Å–∫–∏ –ø–æ–¥ —Ä–∞–∑–º–µ—Ä –∫–∞–¥—Ä–∞
                                mask_resized = cv2.resize(mask_data[0], (frame.shape[1], frame.shape[0]))
                                
                                # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –æ–±—ä–µ–∫—Ç–∞
                                mask_bool = mask_resized > 0.5
                                
                                # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –º–∞—Å–∫—É –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —è—Ä–∫–æ—Å—Ç–∏
                                # –°–æ–∑–¥–∞–µ–º —Ü–≤–µ—Ç–Ω—É—é –º–∞—Å–∫—É
                                colored_mask = np.zeros_like(frame)
                                colored_mask[mask_bool] = color
                                
                                # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –º–∞—Å–∫—É —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é, –Ω–æ –±–µ–∑ –∑–∞—Ç–µ–º–Ω–µ–Ω–∏—è
                                mask_alpha = 0.4
                                # –ò—Å–ø–æ–ª—å–∑—É–µ–º numpy –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤–º–µ—Å—Ç–æ cv2.addWeighted
                                result_frame[mask_bool] = (
                                    result_frame[mask_bool] * (1 - mask_alpha) + 
                                    colored_mask[mask_bool] * mask_alpha
                                ).astype(np.uint8)
                                
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–∞—Å–∫–∏ –¥–ª—è {class_name}: {e}")
        else:
            # Fallback –¥–ª—è –º–æ–¥–µ–ª–µ–π –±–µ–∑ —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏–∏
            for box in results.boxes:
                x1, y1, x2, y2 = box.xyxy[0].cpu().numpy()
                conf = box.conf[0].cpu().numpy()
                cls = int(box.cls[0].cpu().numpy())
                class_name = results.names[cls]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—ä–µ–∫—Ç –≤—Ö–æ–¥–∏—Ç –≤ –Ω–∞—à—É —Ü–≤–µ—Ç–æ–≤—É—é —Å—Ö–µ–º—É
                if class_name in self.object_colors and conf > 0.5:
                    if class_name not in object_counts:
                        object_counts[class_name] = 0
                    object_counts[class_name] += 1
                    
                    color = self.object_colors[class_name]
                    cv2.rectangle(result_frame, (int(x1), int(y1)), (int(x2), int(y2)), color, 2)
                    cv2.putText(result_frame, f'{class_name} {conf:.2f}', 
                               (int(x1), int(y1) - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 2)
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤
        if object_counts:
            stats_text = "Objects: " + ", ".join([f"{count} {obj}" for obj, count in object_counts.items()])
            cv2.putText(result_frame, stats_text, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (255, 255, 255), 2)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        if hasattr(self, 'fps'):
            cv2.putText(result_frame, f"FPS: {self.fps:.1f}", (10, 60), 
                       cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
        
        return result_frame
    
    def camera_thread(self):
        """–ü–æ—Ç–æ–∫ –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –∫–∞–¥—Ä–æ–≤ —Å –∫–∞–º–µ—Ä—ã"""
        while self.running:
            ret, frame = self.cap.read()
            if not ret:
                print("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–∞–¥—Ä–∞ —Å –∫–∞–º–µ—Ä—ã")
                break
            
            # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å –µ—Å–ª–∏ –æ–Ω–∞ –ø–æ–ª–Ω–∞—è
            if self.frame_queue.full():
                try:
                    self.frame_queue.get_nowait()
                except queue.Empty:
                    pass
            
            self.frame_queue.put(frame)
    
    def processing_thread(self):
        """–ü–æ—Ç–æ–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–¥—Ä–æ–≤"""
        frame_count = 0
        start_time = time.time()
        
        while self.running:
            try:
                frame = self.frame_queue.get(timeout=1.0)
            except queue.Empty:
                continue
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–¥—Ä–∞
            processed_frame = self.process_frame(frame)
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ FPS
            frame_count += 1
            if frame_count % 30 == 0:
                elapsed = time.time() - start_time
                self.fps = frame_count / elapsed
                frame_count = 0
                start_time = time.time()
            
            # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –µ—Å–ª–∏ –æ–Ω–∞ –ø–æ–ª–Ω–∞—è
            if self.result_queue.full():
                try:
                    self.result_queue.get_nowait()
                except queue.Empty:
                    pass
            
            self.result_queue.put(processed_frame)
    
    def run_realtime(self):
        """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏...")
        print("–ù–∞–∂–º–∏—Ç–µ 'q' –¥–ª—è –≤—ã—Ö–æ–¥–∞, 's' –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞–¥—Ä–∞")
        
        self.running = True
        
        # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–æ–≤
        camera_thread = threading.Thread(target=self.camera_thread)
        processing_thread = threading.Thread(target=self.processing_thread)
        
        camera_thread.start()
        processing_thread.start()
        
        frame_count = 0
        
        try:
            while True:
                try:
                    processed_frame = self.result_queue.get(timeout=1.0)
                except queue.Empty:
                    continue
                
                # –ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                cv2.imshow('Jetson Road Detection System', processed_frame)
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∞–≤–∏—à
                key = cv2.waitKey(1) & 0xFF
                if key == ord('q'):
                    break
                elif key == ord('s'):
                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–¥—Ä–∞
                    filename = f"jetson_capture_{int(time.time())}.jpg"
                    cv2.imwrite(filename, processed_frame)
                    print(f"üíæ –ö–∞–¥—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
                
                frame_count += 1
                
        except KeyboardInterrupt:
            print("\n‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
        
        finally:
            self.running = False
            camera_thread.join()
            processing_thread.join()
            self.cap.release()
            cv2.destroyAllWindows()
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description="Road Detection System –¥–ª—è Jetson Orin")
    parser.add_argument("--camera", type=int, default=0, help="–ò–Ω–¥–µ–∫—Å –∫–∞–º–µ—Ä—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 0)")
    parser.add_argument("--cpu-only", action="store_true", help="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ CPU")
    
    args = parser.parse_args()
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
        system = JetsonRoadDetectionSystem(
            camera_index=args.camera,
            gpu_acceleration=not args.cpu_only
        )
        
        # –ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        system.run_realtime()
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main()) 